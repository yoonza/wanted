- web = client / server
if 클라이언트가 서버에 요청하면, 서버는 응답해준다 (html, css, js) 혹은 Data를 전달해준다. 

- 컴포넌트 
1. 부모 (state)
2. 자식 (props)

❗️ props는 부모의 것이므로, 자식 컴포넌트에서 변경해서는 안된다. (순수함수)
❗️ 어떤 값을 가져가면 항상 같은 결과값을 내어주는 것이 순수함수이다. 

- React : js안에서 html을 쓸 수 있는 jsx을 사용한다. 
1. className
2. 변수 대입 시, {변수}
3. 함수 내에는 반드시 return 존재 

- 컴포넌트 내에서는 ? 
부모(A) -> 자식(B)으로 데이터 이동하는 컴포넌트 : 단방향 
자식 -> 부모로 가는 방향 : 역방향 (부모의 값을 자식이 건들일 수 있게 함)

전역 저장소의 형태(2개의 공간)
=> 컴포넌트의 방향을 구애받지 않도록 하는 것이 전역 상태 변수(데이터 저장소) !! : Store
=> 데이터 저장소에는 바꾸는 방법을 가지는 저장소도 있음. : Reducer
=> 저장소 내의 값을 구독(Subscribe)

- 화면을 갱신하려면 ? 
state, props 값이 변화해야만 갱신이 된다 !!

- 전역 저장소 (컴포넌트와 별개로 분리되어있음.) = Store
Store: 값과 리듀서 

const store = createStore(값을 바꿔주는 값을 넣어줌, optional하게 중간처리하는 값을 넣어줌(미들웨어));

ContextAPI는 저장소를 여러개 만들어도 되지만, redux는 단일 저장소를 원칙으로 함. 
- 리듀서를 여러개 만들면 redux에서는 한개로 묶어줘야함.
- 미들웨어도 마찬가지 !!

값을 바꾸는 예시 과정인 슬라이스를 만들어주면 자동적으로 리덕스 툴킷이 처리한다. 

- 슬라이스의 구조 : 액션과 리듀서를 반환하는 함수 

내 슬라이스  = creatSlice(값, 바꿀방법);

function createSlice () {
    return { reducer, actions ...}
}


액션을 일일히 찾는 것이 아니라 
액션을 import 해주면 자동적으로 해당 액션의 행위를 수행하게 되는 것이다.